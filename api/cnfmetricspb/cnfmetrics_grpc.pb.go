// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: cnfmetrics.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CnfMetricsService_ShowCnfMetric_FullMethodName   = "/cnfmetricspb.CnfMetricsService/ShowCnfMetric"
	CnfMetricsService_CreateCnfMetric_FullMethodName = "/cnfmetricspb.CnfMetricsService/CreateCnfMetric"
)

// CnfMetricsServiceClient is the client API for CnfMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The CNF Metrics service definition.
type CnfMetricsServiceClient interface {
	// Returns a specific CNF metric.
	ShowCnfMetric(ctx context.Context, in *CnfMetricRequest, opts ...grpc.CallOption) (*CnfMetricResponse, error)
	// Creates a new CNF metric record.
	CreateCnfMetric(ctx context.Context, in *CreateCnfMetricRequest, opts ...grpc.CallOption) (*CnfMetricResponse, error)
}

type cnfMetricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCnfMetricsServiceClient(cc grpc.ClientConnInterface) CnfMetricsServiceClient {
	return &cnfMetricsServiceClient{cc}
}

func (c *cnfMetricsServiceClient) ShowCnfMetric(ctx context.Context, in *CnfMetricRequest, opts ...grpc.CallOption) (*CnfMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CnfMetricResponse)
	err := c.cc.Invoke(ctx, CnfMetricsService_ShowCnfMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cnfMetricsServiceClient) CreateCnfMetric(ctx context.Context, in *CreateCnfMetricRequest, opts ...grpc.CallOption) (*CnfMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CnfMetricResponse)
	err := c.cc.Invoke(ctx, CnfMetricsService_CreateCnfMetric_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CnfMetricsServiceServer is the server API for CnfMetricsService service.
// All implementations must embed UnimplementedCnfMetricsServiceServer
// for forward compatibility.
//
// The CNF Metrics service definition.
type CnfMetricsServiceServer interface {
	// Returns a specific CNF metric.
	ShowCnfMetric(context.Context, *CnfMetricRequest) (*CnfMetricResponse, error)
	// Creates a new CNF metric record.
	CreateCnfMetric(context.Context, *CreateCnfMetricRequest) (*CnfMetricResponse, error)
	mustEmbedUnimplementedCnfMetricsServiceServer()
}

// UnimplementedCnfMetricsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCnfMetricsServiceServer struct{}

func (UnimplementedCnfMetricsServiceServer) ShowCnfMetric(context.Context, *CnfMetricRequest) (*CnfMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCnfMetric not implemented")
}
func (UnimplementedCnfMetricsServiceServer) CreateCnfMetric(context.Context, *CreateCnfMetricRequest) (*CnfMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCnfMetric not implemented")
}
func (UnimplementedCnfMetricsServiceServer) mustEmbedUnimplementedCnfMetricsServiceServer() {}
func (UnimplementedCnfMetricsServiceServer) testEmbeddedByValue()                           {}

// UnsafeCnfMetricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CnfMetricsServiceServer will
// result in compilation errors.
type UnsafeCnfMetricsServiceServer interface {
	mustEmbedUnimplementedCnfMetricsServiceServer()
}

func RegisterCnfMetricsServiceServer(s grpc.ServiceRegistrar, srv CnfMetricsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCnfMetricsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CnfMetricsService_ServiceDesc, srv)
}

func _CnfMetricsService_ShowCnfMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CnfMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnfMetricsServiceServer).ShowCnfMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CnfMetricsService_ShowCnfMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnfMetricsServiceServer).ShowCnfMetric(ctx, req.(*CnfMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CnfMetricsService_CreateCnfMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCnfMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CnfMetricsServiceServer).CreateCnfMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CnfMetricsService_CreateCnfMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CnfMetricsServiceServer).CreateCnfMetric(ctx, req.(*CreateCnfMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CnfMetricsService_ServiceDesc is the grpc.ServiceDesc for CnfMetricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CnfMetricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cnfmetricspb.CnfMetricsService",
	HandlerType: (*CnfMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowCnfMetric",
			Handler:    _CnfMetricsService_ShowCnfMetric_Handler,
		},
		{
			MethodName: "CreateCnfMetric",
			Handler:    _CnfMetricsService_CreateCnfMetric_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cnfmetrics.proto",
}
